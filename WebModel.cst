<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="" Inherits="" Debug="False" LinePragmas="True" Description="根据选择的数据库或表生成模型类" ResponseEncoding="UTF-8" %>
<%@ Property Name="TableName" Type="SchemaExplorer.TableSchema" Default="" Optional="False" Category="" Description="选择需要生成的指定表的模型类" OnChanged="" Editor="" EditorBase="" Serializer="" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using Scm.Component.Common;
using JG.Core;
using Newtonsoft.Json;

namespace Scm.Oms.WebModel
{
    [QueryTable("<%=TableName.Name %>")]
    public class <%=FormatTableName(TableName) %>WebModel: BaseWebModel
    {   
        #region 属性
    <%foreach (ColumnSchema column in TableName.Columns)
    {
        if(!column.IsPrimaryKeyMember&&column.Name!="CREATEUSERID"&&column.Name!="CREATEDATE"&&column.Name!="UPDATEUSERID"
                    &&column.Name!="UPDATEDATE"&&column.Name!="CLIENTID"&&column.Name!="STATUS"&&column.Name!="UpdateUserName"
            &&column.Name!="ORGID"&&column.Name!="STAFFID")  {%>
        /// <summary>
        /// <% if(column.Description==null ||column.Description.Trim().Length==0) {%> <%= column.Name %> <% } else {%> <%= column.Description.Replace("\r\n"," ") %> <%} %> 
        /// </summary>
        <%if(GetAtrributes(column).Length>0) {%>
        <%=GetAtrributes(column) %>
        public <%= GetDataTypeString(column.SystemType,column.Name) %> <%=column.Name %> { get; set; }
        <%} 
        else {
        %>
        public <%= GetDataTypeString(column.SystemType,column.Name) %> <%=column.Name %> { get; set; }
        <%}}} %>
        #endregion
        
        #region 构造函数
        public static <%=FormatTableName(TableName) %>WebModel New()
        {
            return <%=FormatTableName(TableName) %>Entity.New().AsWebModel();
        }
        #endregion
    }
    
    public static class <%=FormatTableName(TableName) %>WebModelExtensions
    {
        #region WebModel转换为Entity
        public static <%=FormatTableName(TableName) %>Entity AsEntity(this <%=FormatTableName(TableName) %>WebModel model)
        {
            <% if (TableName.Name.StartsWith("t_")) {%>
            <%=FormatTableName(TableName) %>Entity entity = new <%=FormatTableName(TableName) %>BL().Get(model.<%=GetPrimaryKeyColumn(TableName)%>);
            <%} else {%>
            <%=FormatTableName(TableName) %>Entity entity = new <%=FormatTableName(TableName) %>BL().Get(model.<%=GetPrimaryKeyColumn(TableName)%>,true);
            <%} %>
            DataProcess.InitModel(model);
            if(entity == null)
            {
                entity = <%=FormatTableName(TableName) %>Entity.New();
                        }
                         <%foreach(ColumnSchema column in TableName.Columns) {%>
                <%if(!column.IsPrimaryKeyMember&&column.Name!="CREATEUSERID"&&column.Name!="CREATEDATE"&&column.Name!="UPDATEUSERID"
                    &&column.Name!="UPDATEDATE"&&column.Name!="CLIENTID"&&column.Name!="STATUS"&&column.Name!="UpdateUserName"
            &&column.Name!="ORGID"&&column.Name!="STAFFID")  {%>    
           <%if(column.SystemType.ToString() == "System.Decimal" || column.SystemType.ToString() == "System.DateTime"){ %>
           entity.<%=column.Name %> = model.<%=column.Name %>.Value;
           <% } else { %>
                entity.<%=column.Name %> = model.<%=column.Name %>;              
           <%}}}  %>
            
            return entity;
        }
        
        public static IEnumerable<<%=FormatTableName(TableName) %>Entity> AsEntity(this IEnumerable<<%=FormatTableName(TableName) %>WebModel> modelList)
        {
            return modelList == null ? null : modelList.Select(AsEntity).Where(c => c != null);
        }
        #endregion
        
        #region Entity转换为WebModel
        public static <%=FormatTableName(TableName) %>WebModel AsWebModel(this <%=FormatTableName(TableName)%>Entity entity, bool isEdit = true)
        {
            if(entity == null)
            {
                return null;
            }
           <%=FormatTableName(TableName) %>WebModel model = new <%=FormatTableName(TableName) %>WebModel();
            model.Init(entity);
            <%foreach(ColumnSchema column in TableName.Columns) {%>
                <%if(!column.IsPrimaryKeyMember&&column.Name!="CREATEUSERID"&&column.Name!="CREATEDATE"&&column.Name!="UPDATEUSERID"
                    &&column.Name!="UPDATEDATE"&&column.Name!="CLIENTID"&&column.Name!="STATUS"&&column.Name!="UpdateUserName"
            &&column.Name!="ORGID"&&column.Name!="STAFFID")  {%>
            model.<%=column.Name %> = entity.<%=column.Name %>;                  
                <%}} %>
            return model;
        }
        
        public static IEnumerable<<%=FormatTableName(TableName) %>WebModel> AsWebModel(this IEnumerable<<%=FormatTableName(TableName) %>Entity> entities, bool isEdit = false)
        {
            return entities == null ? null : entities.Select(t => t.AsWebModel(isEdit)).Where(c => c != null);
        }
        #endregion
    }
}

<script runat="template"> 
    /// <summary>
    /// 格式化数据类型显示
    /// </summary>
    /// <param name="type"></param>
    /// <returns></returns>
    public string GetDataTypeString(Type type,string name)
    {
        switch(type.ToString())
        {
            case "System.Int64":
                return "long";
            case "System.Int32":
                return "int";
            case "System.Int16":
                return "short";
            case "System.String":
                return "string";
            case "System.SByte":
                return "bool";
            case "System.Decimal":
                return GetDataType(name);
            default:
                return type.ToString().Replace("System.","");
        }
    }
    
    
    
     public string GetDataType(string input){
    
        if(input.ToLower().Contains("id"))
        {
             return "decimal?";
        }
        else
        {
             return "decimal?";
        }
    }
    
    /// <summary>
    /// 定义属性的标签
    /// </summary>
    /// <param name="column"></param>
    /// <returns></returns>
    public string GetAtrributes(ColumnSchema column)
    {
        string strAtrributes=string.Empty;
        
        //数据长度标签
        if(column.SystemType==typeof(string))
        {
            strAtrributes+=GetAtrributesSplitString(strAtrributes)+"[StringLength("+column.Size+", ErrorMessage = \""+((column.Description==null||column.Description.Trim().Length==0)?column.Name:column.Description)+"长度不能超过"+column.Size+"\")]";
        }
        //strAtrributes+=GetAtrributesSplitString()+"[ef]";  
        return strAtrributes;
    }
    
    /// <summary>
    /// 各标签之间的分隔
    /// </summary>
    /// <returns></returns>
    public string GetAtrributesSplitString(string strAtrributes)
    {
        if(strAtrributes.Length>0)
            return "\r\n        ";
        else
            return string.Empty;
    }
    
    /// <summary>
    /// 获取主键列
    /// </summary>
    /// <param name="table"></param>
    /// <returns></returns>
    public string GetPrimaryKeyColumn(TableSchema table)
    {
        foreach(ColumnSchema column in table.Columns)
        {
            if(column.IsPrimaryKeyMember)
                return column.Name;
        }
        
        return "";
    }
    
    public string GetNameSpace(TableSchema table)
    {
         if(table.Name.StartsWith("WM_"))
        {
            return "Scm.Wms.WMBL";
        }
        else
            return "Scm.Wms.TBL";
    }
    
    public string FormatTableName(TableSchema table)
    {
        if(table.Name.Contains("_"))
        {
            if(table.Name.StartsWith("Rpt"))
            {
                return "Rpt"+table.Name.Substring(table.Name.IndexOf("_")+1,table.Name.Length-table.Name.IndexOf("_")-1);
            }
            
            return table.Name.Substring(table.Name.IndexOf("_")+1,table.Name.Length-table.Name.IndexOf("_")-1);
        }
            
        else
            return table.Name;
    }
</script>